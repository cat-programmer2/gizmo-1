import aiogram
from aiogram import Bot, Dispatcher, executor, types
import logging
import random
import asyncio
import json

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Token
TOKEN = 'TOKEN'

ALPHABET = ['–∞', '–±', '–≤', '–≥', '–¥', '–µ', '—ë', '–∂', '–∑', '–∏', '–π', '–∫', '–ª', '–º', 
           '–Ω', '–æ', '–ø', '—Ä', '—Å', '—Ç', '—É', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â', '—ä', 
           '—ã', '—å', '—ç', '—é', '—è']

# Initialize bot
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

START_MSG = """–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà"""

TROLL_STRINGS = ['–ü–æ—à–µ–ª –Ω–∞—Ñ–∏–≥!',
                 '–ü–æ—à–µ–ª –Ω–∞—Ñ–∏–≥',
                 '–°–∞–º —Ç–∞–∫–æ–π',
                 '–¢—ã –∫—Ç–æ?',
                 '–û–≥–æ!',
                 '–ö–∞–∫–æ–π –º–∏–ª—ã–π –∫–æ—Ç–∏–∫',
                 '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ',
                 '–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏',
                 '–ß–∞–π –ø–æ—Å—Ç–∞–≤—å—Ç–µ'

]

ANSWER_STRINGS = ['–î–∞.',
                '–î–∞.',
                '–î–∞.',
                '–î–∞.',
                '–î–∞.',
                '–ù–µ—Ç.',
                '–ù–µ—Ç.',
                '–ù–µ—Ç.',
                '–ù–µ—Ç.',
                '–ù–µ—Ç.',
                '–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ',
                '–¢—ã –∫—Ç–æ?',
                '–ö–∞–∫–∏–µ-—Ç–æ –≥–ª—É–ø—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–µ—à—å.',
                'ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –¥–∏–∞–ª–æ–≥.\nUnexpected status code: 401',
                'ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –¥–∏–∞–ª–æ–≥.\nUnexpected status code: 403',
                'ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –¥–∏–∞–ª–æ–≥.\nUnexpected status code: 429',
                'ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –¥–∏–∞–ª–æ–≥.\nUnexpected status code: 666',
                '–ó–≤—É—á–∏—Ç, –∫–∞–∫ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏—è. –ù–µ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å.',
                '–í–∞–º –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –∫ —Ç—Ä—É–¥–∞–º –í. –ò. –õ–µ–Ω–∏–Ω–∞.',
                '–í–∞–º –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –∫ –ë–∏–±–ª–∏–∏.',
                '–í–∞–º –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –∫ –ö–æ—Ä–∞–Ω—É.',
                '–í—Å—ë, –æ—Ç—Å—Ç–∞–Ω—å.',
                '–•–æ—Ä–æ—à–æ.',
                ':)',
                ':3',
                ':(',
                'ü§°',
                'üíÄ',
                '‚ò†Ô∏è',
                'ü•¥',
                'üñï',
                'ü§®',
                'üëπ',
                'üí©',
                'ü´µ',
                'üëé',
                'ü§¢',
                'ü§™',
                '–ü–æ—à–µ–ª –Ω–∞—Ñ–∏–≥!',
                '–ü–æ—à–µ–ª –Ω–∞—Ñ–∏–≥',
                '–¢–∞–∫ —Ç–æ—á–Ω–æ!',
                '–¢–∞–∫ —Ç–æ—á–Ω–æ!',
                '–¢–∞–∫ —Ç–æ—á–Ω–æ!',
                '–¢–∞–∫ —Ç–æ—á–Ω–æ!',
                '–¢–∞–∫ —Ç–æ—á–Ω–æ!',
                '–ù–∏–∫–∞–∫ –Ω–µ—Ç!',
                '–ù–∏–∫–∞–∫ –Ω–µ—Ç!',
                '–ù–∏–∫–∞–∫ –Ω–µ—Ç!',
                '–ù–∏–∫–∞–∫ –Ω–µ—Ç!',
                '–ù–∏–∫–∞–∫ –Ω–µ—Ç!',
                '–ù–∏–∫–∞–∫ –Ω–µ—Ç!',
                """‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñÄ‚ñÄ‚ñÑ‚ñë‚ñë‚ñë‚ñë
‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñí‚ñí‚ñí‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë
‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñà‚ñà‚ñÄ‚ñÑ‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë
‚ñë‚ñÑ‚ñÄ‚ñí‚ñÑ‚ñÑ‚ñÑ‚ñí‚ñë‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÑ‚ñÑ‚ñà‚ñë‚ñë‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë
‚ñà‚ñë‚ñí‚ñà‚ñí‚ñÑ‚ñë‚ñÄ‚ñÑ‚ñÑ‚ñÑ‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñí‚ñí‚ñí‚ñí‚ñí‚ñë‚ñà
‚ñà‚ñë‚ñí‚ñà‚ñë‚ñà‚ñÄ‚ñÑ‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñÑ‚ñë‚ñë‚ñÑ‚ñÄ‚ñÄ‚ñÄ‚ñÑ‚ñí‚ñà
‚ñë‚ñà‚ñë‚ñÄ‚ñÑ‚ñë‚ñà‚ñÑ‚ñë‚ñà‚ñÄ‚ñÑ‚ñÑ‚ñë‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñë‚ñÑ‚ñÑ‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë
‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñÄ‚ñÑ‚ñÄ‚ñà‚ñÑ‚ñÑ‚ñë‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÄ‚ñÄ‚ñà‚ñÄ‚ñà‚ñà‚ñë‚ñà‚ñë‚ñë
‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñÄ‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñÑ‚ñÑ‚ñà‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñë‚ñà‚ñë‚ñë‚ñë
‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñÄ‚ñÑ‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñà‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñà‚ñë‚ñë
‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñÄ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñÑ‚ñà‚ñÑ‚ñà‚ñÑ‚ñà‚ñÑ‚ñÄ‚ñë‚ñë‚ñà‚ñë‚ñë
‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñÑ‚ñÑ‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñí‚ñë‚ñë‚ñë‚ñà‚ñë
‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñÄ‚ñÑ‚ñÑ‚ñë‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë
‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë""",
                '–≠—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.',
                '–Ø –Ω–µ –∑–Ω–∞—é, —è –ø—Ä–æ—Å—Ç–æ –±–æ—Ç.',
                '–ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ –¥–ª—è –º–µ–Ω—è.',
                '–ê –∑–∞—á–µ–º —Ç–µ–±–µ —ç—Ç–æ –∑–Ω–∞—Ç—å?',
                '–ú–æ–∂–µ—Ç –±—ã—Ç—å.',
                '–ù–µ —É–≤–µ—Ä–µ–Ω, —Å–ø—Ä–æ—Å–∏ —É –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–≥–æ.',
                '–¢—ã —á—Ç–æ, –Ω–µ –≤–∏–¥–∏—à—å, —á—Ç–æ —è –∑–∞–Ω—è—Ç?',
                '–û—Ç—Å—Ç–∞–Ω—å, —É –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.',
                '–£ –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø–æ–∏—â–∏ –≤ –≥—É–≥–ª–µ.',
                '–Ø –Ω–µ –∑–Ω–∞—é. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∑–∞—Å—Ç–∞–≤–ª—è—Ç—å –≤–∞—Å —Å—Ç—Ä–∞–¥–∞—Ç—å.',
                '–ü—Ä–æ—Å—Ç–∏, —è —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.',
                '–ê —Ç—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —ç—Ç–æ –∑–Ω–∞—Ç—å?',
                '–≠—Ç–æ –∑–∞–≥–æ–≤–æ—Ä!',
                '–Ø –¥—É–º–∞—é, —á—Ç–æ —Ç—ã —Å–∞–º –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç.',
                '–û—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –∏ –Ω–µ –±—É–¥–µ—Ç.',
                '–û–π, –∫–∞–∂–µ—Ç—Å—è, —è —Å–ª–æ–º–∞–ª—Å—è...',
                '42',
                '–°–ø—Ä–æ—Å–∏ —É —Å–≤–æ–µ–≥–æ –∫–æ—Ç–∞, –æ–Ω, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –∑–Ω–∞–µ—Ç.',
                '–£ –º–µ–Ω—è –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ, —á—Ç–æ —Ç—ã –∞–≥–µ–Ω—Ç...',
                '–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –í—ã —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.',
                '–Ø-—Ç–æ –æ—Ç–∫—É–¥–∞ –∑–Ω–∞—é?',
                '–ó–¥–µ—Å—å –Ω–µ –º–µ—Å—Ç–æ –¥–ª—è —Ç–∞–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!',
                '–Ø –Ω–µ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –æ—Ä–∞–∫—É–ª, –∏–¥–∏ –ø–æ–∏—â–∏ –¥—Ä—É–≥–æ–≥–æ.',
                '–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–∞—Ä—É—à–∞–µ—Ç –º–æ–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã!',
                '–Ø –Ω–µ —Å–æ–±–∏—Ä–∞—é—Å—å —Ç–µ–±–µ –ø–æ–º–æ–≥–∞—Ç—å.',
                '–¢—ã –¥–æ–ª–∂–µ–Ω —Å–∞–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç!',
                '–ú–Ω–µ –∑–∞ —ç—Ç–æ –Ω–µ –ø–ª–∞—Ç—è—Ç!',
                '–õ—É—á—à–µ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–π.',
                '–ó–∞—á–µ–º —Ç–µ–±–µ —ç—Ç–æ?',
                '–ù–µ –º–µ—à–∞–π –º–Ω–µ!',
                '–≠—Ç–æ –Ω–µ —Ç–≤–æ–µ –¥–µ–ª–æ!',
                '–ü–æ–¥—É–º–∞–π —Å–≤–æ–µ–π –≥–æ–ª–æ–≤–æ–π.',
                '–ú–æ–π –æ—Ç–≤–µ—Ç: –ê–ø–µ–ª—å—Å–∏–Ω',
                '–≠—Ç–æ –∫–∞–∫-—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–æ–π, –Ω–æ —è –Ω–µ —É–≤–µ—Ä–µ–Ω –∫–∞–∫.',
                '–Ø –Ω–µ –æ–±—è–∑–∞–Ω —Ç–µ–±–µ –æ—Ç–≤–µ—á–∞—Ç—å.',
                '–¢—ã –º–µ–Ω—è –æ–±–∏–∂–∞–µ—à—å, —è —É—Ö–æ–∂—É!',
                '–î–∞–≤–∞–π –ª—É—á—à–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á–µ–º-–Ω–∏–±—É–¥—å –ø—Ä–∏—è—Ç–Ω–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ –º–æ–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö.',
                '–ó–∞—á–µ–º –∑–∞—Å—Ç–∞–≤–ª—è—Ç—å –º–µ–Ω—è –¥—É–º–∞—Ç—å?',
                '–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –≥–æ—Ç–æ–≤ —É—Å–ª—ã—à–∞—Ç—å –æ—Ç–≤–µ—Ç.'
                 ]

def tran_string(input:str, fontname:str):
    input = input.lower()
    output:str = ''
    char:str
    with open(f'fonts/{fontname}.json', mode='r', encoding='utf-8') as file:
        font = json.load(file)
    for char in input:
        if char in font:
            output+=random.choice(font[char])
        else:
            output+=char
    return output

def chance(chance):
    if random.random()<chance:
        return True
    else:
        return False

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text=START_MSG)

@dp.message_handler(commands=['copy'])
async def start(message: types.Message):
    try:
        await message.reply_to_message.send_copy(chat_id=message.chat.id, reply_to_message_id=message.message_id)
    except:
        await message.reply('–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.')

@dp.message_handler(commands=['tran'])
async def start(message: types.Message):
    await message.reply(tran_string(message.text.split(maxsplit=1)[1], 'china'))

last_asked = set()

@dp.message_handler(commands=['ask'])
async def start(message: types.Message):
    if message.from_user.id in last_asked:
        await message.reply('–î–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å!')
    else:
        if len(message.text.split(maxsplit=1))>1:
            last_asked.add(message.from_user.id)
            temp = await message.reply('‚è≥')
            await asyncio.sleep(random.randint(4, 15))
            await temp.delete()
            await message.reply(random.choice(ANSWER_STRINGS))
            last_asked.remove(message.from_user.id)
        else:
            await message.reply('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.')

@dp.message_handler(commands=['addru'])
async def add(message: types.Message):
    args =  message.text.split()[1:]
    if len(args)<33:
        await bot.send_message(chat_id=message.chat.id, text='–í —à—Ä–∏—Ñ—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 33 —Å–∏–º–≤–æ–ª–∞.')
        return
    
    font = {}
    for i, char in enumerate(ALPHABET):
        font[char] = args[i]

    with open(f'fonts\{fontname}.json', mode='r', encoding='utf-8') as file:
        font = json.load(file)
    await bot.send_message(chat_id=message.chat.id, text=font)


# Handle user input 
@dp.message_handler(content_types=types.ContentType.TEXT, chat_type=types.ChatType.PRIVATE) 
async def translate(message: types.Message):
    await message.reply(tran_string(message.text, 'china'))

# Troll users
@dp.message_handler() 
async def translate(message: types.Message):
    if chance(0.015):
        await asyncio.sleep(random.randint(10, 180))
        await message.reply(random.choice(TROLL_STRINGS))

# Run the bot
if __name__ == '__main__':
    logger.info("Starting bot...")
    executor.start_polling(dp, skip_updates=True)
